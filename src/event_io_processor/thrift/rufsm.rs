// Autogenerated by Thrift Compiler (0.21.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

#![allow(dead_code)]
#![allow(unused_imports)]
#![allow(unused_extern_crates)]
#![allow(clippy::too_many_arguments, clippy::type_complexity, clippy::vec_box, clippy::wrong_self_convention)]
#![cfg_attr(rustfmt, rustfmt_skip)]

use std::convert::TryFrom;
use std::default::Default;
use std::fmt::Display;

use thrift::{ApplicationError, ApplicationErrorKind, TThriftClient};
use thrift::protocol::{TFieldIdentifier, TInputProtocol, TMessageIdentifier, TMessageType, TOutputProtocol, TSerializable, TStructIdentifier, TType};
use thrift::protocol::field_id;
use thrift::protocol::verify_expected_message_type;
use thrift::protocol::verify_expected_sequence_number;
use thrift::protocol::verify_expected_service_call;
use thrift::protocol::verify_required_field_exists;
use thrift::server::TProcessor;

//
// Event
//

#[derive(Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct Event {
    pub name: Option<String>,
}

impl Event {
    pub fn new<F1>(name: F1) -> Event
    where
        F1: Into<Option<String>>,
    {
        Event {
            name: name.into(),
        }
    }
}

impl TSerializable for Event {
    fn read_from_in_protocol(i_prot: &mut dyn TInputProtocol) -> thrift::Result<Event> {
        i_prot.read_struct_begin()?;
        let mut f_1: Option<String> = Some("".to_owned());
        loop {
            let field_ident = i_prot.read_field_begin()?;
            if field_ident.field_type == TType::Stop {
                break;
            }
            let field_id = field_id(&field_ident)?;
            match field_id {
                1 => {
                    let val = i_prot.read_string()?;
                    f_1 = Some(val);
                }
                _ => {
                    i_prot.skip(field_ident.field_type)?;
                }
            };
            i_prot.read_field_end()?;
        }
        i_prot.read_struct_end()?;
        let ret = Event {
            name: f_1,
        };
        Ok(ret)
    }
    fn write_to_out_protocol(&self, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
        let struct_ident = TStructIdentifier::new("Event");
        o_prot.write_struct_begin(&struct_ident)?;
        if let Some(ref fld_var) = self.name {
            o_prot.write_field_begin(&TFieldIdentifier::new("name", TType::String, 1))?;
            o_prot.write_string(fld_var)?;
            o_prot.write_field_end()?
        }
        o_prot.write_field_stop()?;
        o_prot.write_struct_end()
    }
}

//
// EventProcessor service client
//

/// FSM Event Processor
pub trait TEventProcessorSyncClient {
    fn register_fsm(&mut self, client_address: String) -> thrift::Result<String>;
    fn send_event(&mut self, fsm_id: String, event: Event) -> thrift::Result<()>;
}

pub trait TEventProcessorSyncClientMarker {}

pub struct EventProcessorSyncClient<IP, OP>
where
    IP: TInputProtocol,
    OP: TOutputProtocol,
{
    _i_prot: IP,
    _o_prot: OP,
    _sequence_number: i32,
}

impl<IP, OP> EventProcessorSyncClient<IP, OP>
where
    IP: TInputProtocol,
    OP: TOutputProtocol,
{
    pub fn new(input_protocol: IP, output_protocol: OP) -> EventProcessorSyncClient<IP, OP> {
        EventProcessorSyncClient { _i_prot: input_protocol, _o_prot: output_protocol, _sequence_number: 0 }
    }
}

impl<IP, OP> TThriftClient for EventProcessorSyncClient<IP, OP>
where
    IP: TInputProtocol,
    OP: TOutputProtocol,
{
    fn i_prot_mut(&mut self) -> &mut dyn TInputProtocol { &mut self._i_prot }
    fn o_prot_mut(&mut self) -> &mut dyn TOutputProtocol { &mut self._o_prot }
    fn sequence_number(&self) -> i32 { self._sequence_number }
    fn increment_sequence_number(&mut self) -> i32 {
        self._sequence_number += 1;
        self._sequence_number
    }
}

impl<IP, OP> TEventProcessorSyncClientMarker for EventProcessorSyncClient<IP, OP> where IP: TInputProtocol, OP: TOutputProtocol {}

impl<C: TThriftClient + TEventProcessorSyncClientMarker> TEventProcessorSyncClient for C {
    fn register_fsm(&mut self, client_address: String) -> thrift::Result<String> {
        (
            {
                self.increment_sequence_number();
                let message_ident = TMessageIdentifier::new("registerFsm", TMessageType::Call, self.sequence_number());
                let call_args = EventProcessorRegisterFsmArgs { client_address };
                self.o_prot_mut().write_message_begin(&message_ident)?;
                call_args.write_to_out_protocol(self.o_prot_mut())?;
                self.o_prot_mut().write_message_end()?;
                self.o_prot_mut().flush()
            }
        )?;
        {
            let message_ident = self.i_prot_mut().read_message_begin()?;
            verify_expected_sequence_number(self.sequence_number(), message_ident.sequence_number)?;
            verify_expected_service_call("registerFsm", &message_ident.name)?;
            if message_ident.message_type == TMessageType::Exception {
                let remote_error = thrift::Error::read_application_error_from_in_protocol(self.i_prot_mut())?;
                self.i_prot_mut().read_message_end()?;
                return Err(thrift::Error::Application(remote_error));
            }
            verify_expected_message_type(TMessageType::Reply, message_ident.message_type)?;
            let result = EventProcessorRegisterFsmResult::read_from_in_protocol(self.i_prot_mut())?;
            self.i_prot_mut().read_message_end()?;
            result.ok_or()
        }
    }
    fn send_event(&mut self, fsm_id: String, event: Event) -> thrift::Result<()> {
        (
            {
                self.increment_sequence_number();
                let message_ident = TMessageIdentifier::new("send_event", TMessageType::OneWay, self.sequence_number());
                let call_args = EventProcessorSendEventArgs { fsm_id, event };
                self.o_prot_mut().write_message_begin(&message_ident)?;
                call_args.write_to_out_protocol(self.o_prot_mut())?;
                self.o_prot_mut().write_message_end()?;
                self.o_prot_mut().flush()
            }
        )?;
        Ok(())
    }
}

//
// EventProcessor service processor
//

/// FSM Event Processor
pub trait EventProcessorSyncHandler {
    fn handle_register_fsm(&self, client_address: String) -> thrift::Result<String>;
    fn handle_send_event(&self, fsm_id: String, event: Event) -> thrift::Result<()>;
}

pub struct EventProcessorSyncProcessor<H: EventProcessorSyncHandler> {
    handler: H,
}

impl<H: EventProcessorSyncHandler> EventProcessorSyncProcessor<H> {
    pub fn new(handler: H) -> EventProcessorSyncProcessor<H> {
        EventProcessorSyncProcessor {
            handler,
        }
    }
    fn process_register_fsm(&self, incoming_sequence_number: i32, i_prot: &mut dyn TInputProtocol, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
        TEventProcessorProcessFunctions::process_register_fsm(&self.handler, incoming_sequence_number, i_prot, o_prot)
    }
    fn process_send_event(&self, incoming_sequence_number: i32, i_prot: &mut dyn TInputProtocol, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
        TEventProcessorProcessFunctions::process_send_event(&self.handler, incoming_sequence_number, i_prot, o_prot)
    }
}

pub struct TEventProcessorProcessFunctions;

impl TEventProcessorProcessFunctions {
    pub fn process_register_fsm<H: EventProcessorSyncHandler>(handler: &H, incoming_sequence_number: i32, i_prot: &mut dyn TInputProtocol, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
        let args = EventProcessorRegisterFsmArgs::read_from_in_protocol(i_prot)?;
        match handler.handle_register_fsm(args.client_address) {
            Ok(handler_return) => {
                let message_ident = TMessageIdentifier::new("registerFsm", TMessageType::Reply, incoming_sequence_number);
                o_prot.write_message_begin(&message_ident)?;
                let ret = EventProcessorRegisterFsmResult { result_value: Some(handler_return) };
                ret.write_to_out_protocol(o_prot)?;
                o_prot.write_message_end()?;
                o_prot.flush()
            }
            Err(e) => {
                match e {
                    thrift::Error::Application(app_err) => {
                        let message_ident = TMessageIdentifier::new("registerFsm", TMessageType::Exception, incoming_sequence_number);
                        o_prot.write_message_begin(&message_ident)?;
                        thrift::Error::write_application_error_to_out_protocol(&app_err, o_prot)?;
                        o_prot.write_message_end()?;
                        o_prot.flush()
                    }
                    _ => {
                        let ret_err = {
                            ApplicationError::new(
                                ApplicationErrorKind::Unknown,
                                e.to_string(),
                            )
                        };
                        let message_ident = TMessageIdentifier::new("registerFsm", TMessageType::Exception, incoming_sequence_number);
                        o_prot.write_message_begin(&message_ident)?;
                        thrift::Error::write_application_error_to_out_protocol(&ret_err, o_prot)?;
                        o_prot.write_message_end()?;
                        o_prot.flush()
                    }
                }
            }
        }
    }
    pub fn process_send_event<H: EventProcessorSyncHandler>(handler: &H, _: i32, i_prot: &mut dyn TInputProtocol, _: &mut dyn TOutputProtocol) -> thrift::Result<()> {
        let args = EventProcessorSendEventArgs::read_from_in_protocol(i_prot)?;
        match handler.handle_send_event(args.fsm_id, args.event) {
            Ok(_) => {
                Ok(())
            }
            Err(e) => {
                match e {
                    thrift::Error::Application(app_err) => {
                        Err(thrift::Error::Application(app_err))
                    }
                    _ => {
                        let ret_err = {
                            ApplicationError::new(
                                ApplicationErrorKind::Unknown,
                                e.to_string(),
                            )
                        };
                        Err(thrift::Error::Application(ret_err))
                    }
                }
            }
        }
    }
}

impl<H: EventProcessorSyncHandler> TProcessor for EventProcessorSyncProcessor<H> {
    fn process(&self, i_prot: &mut dyn TInputProtocol, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
        let message_ident = i_prot.read_message_begin()?;
        let res = match &*message_ident.name {
            "registerFsm" => {
                self.process_register_fsm(message_ident.sequence_number, i_prot, o_prot)
            }
            "send_event" => {
                self.process_send_event(message_ident.sequence_number, i_prot, o_prot)
            }
            method => {
                Err(
                    thrift::Error::Application(
                        ApplicationError::new(
                            ApplicationErrorKind::UnknownMethod,
                            format!("unknown method {}", method),
                        )
                    )
                )
            }
        };
        thrift::server::handle_process_result(&message_ident, res, o_prot)
    }
}

//
// EventProcessorRegisterFsmArgs
//

#[derive(Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
struct EventProcessorRegisterFsmArgs {
    client_address: String,
}

impl EventProcessorRegisterFsmArgs {
    fn read_from_in_protocol(i_prot: &mut dyn TInputProtocol) -> thrift::Result<EventProcessorRegisterFsmArgs> {
        i_prot.read_struct_begin()?;
        let mut f_1: Option<String> = None;
        loop {
            let field_ident = i_prot.read_field_begin()?;
            if field_ident.field_type == TType::Stop {
                break;
            }
            let field_id = field_id(&field_ident)?;
            match field_id {
                1 => {
                    let val = i_prot.read_string()?;
                    f_1 = Some(val);
                }
                _ => {
                    i_prot.skip(field_ident.field_type)?;
                }
            };
            i_prot.read_field_end()?;
        }
        i_prot.read_struct_end()?;
        verify_required_field_exists("EventProcessorRegisterFsmArgs.client_address", &f_1)?;
        let ret = EventProcessorRegisterFsmArgs {
            client_address: f_1.expect("auto-generated code should have checked for presence of required fields"),
        };
        Ok(ret)
    }
    fn write_to_out_protocol(&self, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
        let struct_ident = TStructIdentifier::new("registerFsm_args");
        o_prot.write_struct_begin(&struct_ident)?;
        o_prot.write_field_begin(&TFieldIdentifier::new("clientAddress", TType::String, 1))?;
        o_prot.write_string(&self.client_address)?;
        o_prot.write_field_end()?;
        o_prot.write_field_stop()?;
        o_prot.write_struct_end()
    }
}

//
// EventProcessorRegisterFsmResult
//

#[derive(Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
struct EventProcessorRegisterFsmResult {
    result_value: Option<String>,
}

impl EventProcessorRegisterFsmResult {
    fn ok_or(self) -> thrift::Result<String> {
        if self.result_value.is_some() {
            Ok(self.result_value.unwrap())
        } else {
            Err(
                thrift::Error::Application(
                    ApplicationError::new(
                        ApplicationErrorKind::MissingResult,
                        "no result received for EventProcessorRegisterFsm",
                    )
                )
            )
        }
    }
    fn read_from_in_protocol(i_prot: &mut dyn TInputProtocol) -> thrift::Result<EventProcessorRegisterFsmResult> {
        i_prot.read_struct_begin()?;
        let mut f_0: Option<String> = None;
        loop {
            let field_ident = i_prot.read_field_begin()?;
            if field_ident.field_type == TType::Stop {
                break;
            }
            let field_id = field_id(&field_ident)?;
            match field_id {
                0 => {
                    let val = i_prot.read_string()?;
                    f_0 = Some(val);
                }
                _ => {
                    i_prot.skip(field_ident.field_type)?;
                }
            };
            i_prot.read_field_end()?;
        }
        i_prot.read_struct_end()?;
        let ret = EventProcessorRegisterFsmResult {
            result_value: f_0,
        };
        Ok(ret)
    }
    fn write_to_out_protocol(&self, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
        let struct_ident = TStructIdentifier::new("EventProcessorRegisterFsmResult");
        o_prot.write_struct_begin(&struct_ident)?;
        if let Some(ref fld_var) = self.result_value {
            o_prot.write_field_begin(&TFieldIdentifier::new("result_value", TType::String, 0))?;
            o_prot.write_string(fld_var)?;
            o_prot.write_field_end()?
        }
        o_prot.write_field_stop()?;
        o_prot.write_struct_end()
    }
}

//
// EventProcessorSendEventArgs
//

#[derive(Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
struct EventProcessorSendEventArgs {
    fsm_id: String,
    event: Event,
}

impl EventProcessorSendEventArgs {
    fn read_from_in_protocol(i_prot: &mut dyn TInputProtocol) -> thrift::Result<EventProcessorSendEventArgs> {
        i_prot.read_struct_begin()?;
        let mut f_1: Option<String> = None;
        let mut f_2: Option<Event> = None;
        loop {
            let field_ident = i_prot.read_field_begin()?;
            if field_ident.field_type == TType::Stop {
                break;
            }
            let field_id = field_id(&field_ident)?;
            match field_id {
                1 => {
                    let val = i_prot.read_string()?;
                    f_1 = Some(val);
                }
                2 => {
                    let val = Event::read_from_in_protocol(i_prot)?;
                    f_2 = Some(val);
                }
                _ => {
                    i_prot.skip(field_ident.field_type)?;
                }
            };
            i_prot.read_field_end()?;
        }
        i_prot.read_struct_end()?;
        verify_required_field_exists("EventProcessorSendEventArgs.fsm_id", &f_1)?;
        verify_required_field_exists("EventProcessorSendEventArgs.event", &f_2)?;
        let ret = EventProcessorSendEventArgs {
            fsm_id: f_1.expect("auto-generated code should have checked for presence of required fields"),
            event: f_2.expect("auto-generated code should have checked for presence of required fields"),
        };
        Ok(ret)
    }
    fn write_to_out_protocol(&self, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
        let struct_ident = TStructIdentifier::new("send_event_args");
        o_prot.write_struct_begin(&struct_ident)?;
        o_prot.write_field_begin(&TFieldIdentifier::new("fsmId", TType::String, 1))?;
        o_prot.write_string(&self.fsm_id)?;
        o_prot.write_field_end()?;
        o_prot.write_field_begin(&TFieldIdentifier::new("event", TType::Struct, 2))?;
        self.event.write_to_out_protocol(o_prot)?;
        o_prot.write_field_end()?;
        o_prot.write_field_stop()?;
        o_prot.write_struct_end()
    }
}

